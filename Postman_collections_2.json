{
	"info": {
		"_postman_id": "81a38000-3423-479d-a7d0-a044e8d3edb6",
		"name": "HW2_Postman_SialiukI_gr27",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос\r",
							"pm.environment.get(\"url\");\r",
							"pm.sendRequest.url;\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос; \r",
							"pm.environment.get(\"url\");\r",
							"pm.sendRequest.url;\r",
							"\r",
							"pm.test(\"2. Проверить статус код = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"const jsonResp = pm.response.json();\r",
							"\r",
							"pm.test(\"4.Проверить, что name в ответе равно name s request (name вбить руками)\", function () {\r",
							"  pm.expect(jsonResp.name).to.eql(\"Iryna\");\r",
							"});\r",
							"\r",
							"pm.test(\"5. Проверить, что age в ответе равно age s request (age вбить руками)\", function () {\r",
							"  pm.expect(jsonResp.age).to.eql(\"36\");\r",
							"});\r",
							"\r",
							"pm.test(\"6. Проверить, что salary в ответе равно salary s request (salary вбить руками)\", function () {\r",
							"  pm.expect(jsonResp.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//7. Спарсить reques\r",
							"let jsonReq = request.data;\r",
							"\r",
							"pm.test(\"8. Проверить, что name в ответе равно name s request (name забрать из request)\", function () {\r",
							"  pm.expect(jsonResp.name).to.eql(jsonReq.name);\r",
							"});\r",
							"\r",
							"pm.test(\"9. Проверить, что age в ответе равно age s request (age забрать из request)\", function () {\r",
							"  pm.expect(jsonResp.age).to.eql(jsonReq.age);\r",
							"});\r",
							"\r",
							"pm.test(\"10. Проверить, что salary в ответе равно salary s request (salary забрать из request)\", function () {\r",
							"  pm.expect(jsonResp.salary).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"console.log(\"11. Вывести в консоль параметр family из response - \", jsonResp.family);\r",
							"\r",
							"pm.test(\"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
							"   pm.expect(jsonResp.family.u_salary_1_5_year).to.eql(jsonReq.salary * 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Iryna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос; \r",
							"pm.sendRequest(pm.environment.get(\"url\"));\r",
							"\r",
							"pm.test(\"2. Проверить статус код = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonResp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let jsonReq = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"5. Проверить, что name в ответе равно name s request (name забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);\r",
							"});\r",
							"\r",
							"pm.test(\"6. Проверить, что age в ответе равно age s request (age забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.age).to.eql(jsonReq.age);\r",
							"});\r",
							"\r",
							"pm.test(\"7. Проверить, что salary в ответе равно salary s request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.salary).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"8. Вывести в консоль параметр family из response - \", jsonResp.family);\r",
							"\r",
							"pm.test(\"9. Проверить, что у параметра dog есть параметры name\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.haveOwnProperty(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"10. Проверить, что у параметра dog есть параметры age\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog).to.haveOwnProperty(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"11. Проверить, что параметр name имеет значение Luky\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"12. Проверить, что параметр age имеет значение 4\", function () {\r",
							"    pm.expect(jsonResp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Iryna&age=36&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Iryna"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"pm.sendRequest(pm.environment.get(\"url\"));\r",
							"\r",
							"pm.test(\"2. Проверить cтатус код = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json. \r",
							"let jsonResp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let jsonReq = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"5. Проверить, что name в ответе равно name s request (name забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);\r",
							"});\r",
							"\r",
							"let jsonReqAgeNum = parseInt(jsonReq.age);\r",
							"pm.test(\"6. Проверить, что age в ответе равно age из request (age забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.age).to.eql(jsonReqAgeNum);\r",
							"});\r",
							"\r",
							"console.log(\"7. Вывести в консоль параметр salary из request \", jsonReq.salary);\r",
							"\r",
							"console.log(\"8. Вывести в консоль параметр salary из response \", jsonResp.salary);\r",
							"\r",
							"console.log(\"9. Вывести в консоль 0-й элемент параметра salary из response \", jsonResp.salary[0]);\r",
							"\r",
							"console.log(\"10. Вывести в консоль 1-й элемент параметра salary параметр salary из response \", +jsonResp.salary[1]);\r",
							"\r",
							"let jsonRespSal2Num = Number(jsonResp.salary[2]);\r",
							"console.log(\"11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\", jsonRespSal2Num);\r",
							"\r",
							"pm.test(\"12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.salary[0]).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"let jsonRespSal1Num = Number(jsonResp.salary[1]);\r",
							"pm.test(\"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonRespSal1Num).to.eql(jsonReq.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonRespSal2Num).to.eql(jsonReq.salary * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name и 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonReq.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age и 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 36);\r",
							"\r",
							"// 17. Создать в окружении переменную salary и  20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonReq.salary);\r",
							"\r",
							"let i = jsonResp.salary[0];\r",
							"for (i = 0; i < jsonResp.salary.length; i++) {\r",
							"    console.log(\" 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary \", jsonResp.salary[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Iryna&age=36&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Iryna"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"pm.sendRequest(pm.environment.get('url'));\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"5. Проверить статус код = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonResp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let jsonReq = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"8. Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonResp).to.haveOwnProperty(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"9. Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonResp).to.haveOwnProperty(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"10. Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonResp).to.haveOwnProperty(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonResp).to.haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonResp).to.haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"13. Проверить, что json response имеет параметр person\", function () {\r",
							"    pm.expect(jsonResp).to.haveOwnProperty(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.start_qa_salary).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.qa_salary_after_6_months).to.eql(jsonReq.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.qa_salary_after_12_months).to.eql(jsonReq.salary * 2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp[\"qa_salary_after_1.5_year\"]).to.eql(jsonReq.salary * 3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp[\"qa_salary_after_3.5_years\"]).to.eql(jsonReq.salary * 3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.person.u_name[1]).to.eql(+jsonReq.salary);\r",
							"});\r",
							"\r",
							"let jsonReqAgeNum = Number(jsonReq.age);\r",
							"pm.test(\"20. Проверить, что что параметр u_age равен age из request (age забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.person.u_age).to.eql(jsonReqAgeNum);\r",
							"});\r",
							"\r",
							"pm.test(\"21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonResp.person.u_salary_5_years).to.eql(jsonReq.salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (var k in jsonResp.person) \r",
							"{\r",
							"    if(typeof(jsonResp.person[k]) == 'object') {\r",
							"        console.log(k);\r",
							"        for (var i in jsonResp.person[k]) { \r",
							"            console.log(jsonResp.person[k][i])}\r",
							"        }\r",
							"    else {console.log (k + ' = ' + jsonResp.person[k])}\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}